<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Metatrader教習所]]></title>
  <link href="http://mt4-school.github.io/atom.xml" rel="self"/>
  <link href="http://mt4-school.github.io/"/>
  <updated>2013-08-14T01:57:47+09:00</updated>
  <id>http://mt4-school.github.io/</id>
  <author>
    <name><![CDATA[MT4-School]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[繰り返し処理(while編)]]></title>
    <link href="http://mt4-school.github.io/blog/2013/08/04/while/"/>
    <updated>2013-08-04T21:47:00+09:00</updated>
    <id>http://mt4-school.github.io/blog/2013/08/04/while</id>
    <content type="html"><![CDATA[<p>繰り返し処理の実現方式として、for文の他にwhile文を用いる方法もあります。</p>

<p>  　</p>

<h3>whileの使い方</h3>

<p>whileは次のように使います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>while (評価式) {
</span><span class='line'>    // 繰り返し実行したい処理をここに書く
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>はい、よくわかりませんね。
　</p>

<p>このままだとわかりにくいので、具体例を挙げます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//+------------------------------------------------------------------+
</span><span class='line'>//|                                                while_sample1.mq4 |
</span><span class='line'>//|                                                       MT4-school |
</span><span class='line'>//|                                                                  |
</span><span class='line'>//+------------------------------------------------------------------+
</span><span class='line'>#property copyright "MT4-school"
</span><span class='line'>#property link      ""
</span><span class='line'>
</span><span class='line'>int start() {
</span><span class='line'>    int i=0;
</span><span class='line'>    while(i &lt; 10) {
</span><span class='line'>        Print("whileを使った繰り返し処理　i=" + i);
</span><span class='line'>        i++; // iに、現在のiに1を足した値を代入する。i=0の時だったら、この行を通過するとi=1になる。
</span><span class='line'>    }
</span><span class='line'>    return(0);
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>　<br/>
ここでのwhile文はどういう意味かと申しますと、次のような意味になります。</p>

<table>
<thead>
<tr>
<th>No    </th>
<th> 内容       　</th>
<th> 意味</th>
</tr>
</thead>
<tbody>
<tr>
<td>1項目  </td>
<td> i &lt; 10    　</td>
<td>　iが10未満の間、繰り返し処理する。</td>
</tr>
</tbody>
</table>


<p>（for文と比べてややシンプルに見えますね）　</p>

<p>これを実行すると、Expertログにはこんなふうに表示されます。</p>

<table>
<thead>
<tr>
<th>   </th>
<th> Expertログ    </th>
</tr>
</thead>
<tbody>
<tr>
<td>　 </td>
<td> whileを使った繰り返し処理　i=0 　</td>
</tr>
<tr>
<td>　 </td>
<td> whileを使った繰り返し処理　i=1 　</td>
</tr>
<tr>
<td>　 </td>
<td> whileを使った繰り返し処理　i=2 　</td>
</tr>
<tr>
<td>　 </td>
<td> whileを使った繰り返し処理　i=3 　</td>
</tr>
<tr>
<td> 　</td>
<td> whileを使った繰り返し処理　i=4 　</td>
</tr>
<tr>
<td>　 </td>
<td> whileを使った繰り返し処理　i=5 　</td>
</tr>
<tr>
<td>　 </td>
<td> whileを使った繰り返し処理　i=6 　</td>
</tr>
<tr>
<td>　 </td>
<td> whileを使った繰り返し処理　i=7 　</td>
</tr>
<tr>
<td>　 </td>
<td> whileを使った繰り返し処理　i=8 　</td>
</tr>
<tr>
<td>　 </td>
<td> whileを使った繰り返し処理　i=9 　</td>
</tr>
</tbody>
</table>


<p>  　</p>

<p>次は少し実用的な使い方です。次のようにすると、現在持っているすべてのポジションを、全て成功するまでクローズし続けます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//+------------------------------------------------------------------+
</span><span class='line'>//|                                                while_sample2.mq4 |
</span><span class='line'>//|                                                       MT4-school |
</span><span class='line'>//|                                                                  |
</span><span class='line'>//+------------------------------------------------------------------+
</span><span class='line'>#property copyright "MT4-school"
</span><span class='line'>#property link      ""
</span><span class='line'>
</span><span class='line'>// スリッページ(3位に設定しておきましょうかね)
</span><span class='line'>int slippage = 3;
</span><span class='line'>
</span><span class='line'>int start() {
</span><span class='line'>
</span><span class='line'>    // 持ってるポジションの数だけ繰り返す
</span><span class='line'>    for (int i=OrdersTotal()-1; i&gt;=0; i--) {
</span><span class='line'>
</span><span class='line'>        // 全ポジションの中から、一つのポジションに着目する
</span><span class='line'>        OrderSelect(i, SELECT_BY_POS);
</span><span class='line'>                
</span><span class='line'>        bool isCloseSuccess = false;
</span><span class='line'>        
</span><span class='line'>        // isCloseSuccessがfalseの間はずっと、OrderClose処理をし続ける。
</span><span class='line'>        while (isCloseSuccess == false) { 
</span><span class='line'>            // 買いエントリーで建てたポジションならBidで売る        
</span><span class='line'>            if  OrderType() == OP_BUY) {
</span><span class='line'>            
</span><span class='line'>                // OrderCloseに成功すると、isCloseSuccessにtrueがセットされる
</span><span class='line'>                // OrderCloseに失敗すると、isCloseSuccessにfalseがセットされる
</span><span class='line'>                isCloseSuccess = OrderClose(OrderTicket(), OrderLots(), Bid, slippage, Red);
</span><span class='line'>
</span><span class='line'>            // 売りエントリーで建てたポジションならAskで買う
</span><span class='line'>            } else if (OrderType() == OP_SELL) {
</span><span class='line'>
</span><span class='line'>                // OrderCloseに成功すると、isCloseSuccessにtrueがセットされる
</span><span class='line'>                // OrderCloseに失敗すると、isCloseSuccessにfalseがセットされる
</span><span class='line'>                isCloseSuccess = OrderClose(OrderTicket(), OrderLots(), Ask, slippage, Green);
</span><span class='line'>            }
</span><span class='line'>            
</span><span class='line'>            // OrderCloseに失敗した場合
</span><span class='line'>            if (isCloseSuccess == false) {
</span><span class='line'>                // Expertログにエラーコードを表示
</span><span class='line'>                Print("ErrorCode=" + GetLastError());
</span><span class='line'>            
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    return(0);
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>簡単な解説</p>

<p><code>while (isCloseSuccess == false) {</code>の効果により、ポジションを確実にクローズするまで、クローズ処理をし続けます。
クローズできないシーンの例としては、値動きが激しく価格の再提示が発生した場合や、通信エラーが発生した場合など、
いろいろ考えられますね。</p>

<p>ここでは例を簡単にするためのコードを挙げていますので、実際に全ポジションクローズを安全に実施しようとするのであれば、もう少し複雑な処理が必要になることを補足しておきます。
（例えば、とある理由で絶対にクローズできないポジションを持つ場合などは、クローズ処理は永久に成功せず、この例で挙げたロジックはwhile処理を抜けることができず、無限ループになり、MT4が無応答になったりPCがフリーズする場合が考えられます。）</p>

<blockquote><p><strong>所長日記</strong></p>

<p>所長が好きなビールはVEDETT。
<a href="http://www.vedett.jp/">http://www.vedett.jp/</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[繰り返し処理(for文編)]]></title>
    <link href="http://mt4-school.github.io/blog/2013/08/01/for-and-while/"/>
    <updated>2013-08-01T21:07:00+09:00</updated>
    <id>http://mt4-school.github.io/blog/2013/08/01/for-and-while</id>
    <content type="html"><![CDATA[<p>同じような事を繰り返し実行したい時に、forやwhileというものが役立ちます。<br/>
これらは、ある条件がくるまでずっと処理の繰り返しをするものです。</p>

<p>  　</p>

<h3>どんな時に繰り返し処理が必要になる？</h3>

<p>MT4では、例えば次のような場合この繰り返し処理を使います。</p>

<blockquote><ul>
<li>現在保有する全ポジションを、繰り返し処理で全てクローズする場合</li>
<li>現在の足から過去１０本の足のうち、2番に安い足がどれかを探す</li>
<li>一つのEAで、USDJPY, EURUSD, EURJPY等のBidをPrintする。

<ul>
<li>Print：Expertログに情報を出力（表示）することができるMT4の関数。</li>
</ul>
</li>
</ul>
</blockquote>

<p>・・・などなど</p>

<p>まあ、あまり深くは考えずに、必要だと思った時に繰り返し処理を使って見てください。</p>

<p>  　</p>

<h3>forの使い方</h3>

<p>forは次のように使います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for (int i=開始値; i&lt; 終了値; 増分) {
</span><span class='line'>    // 繰り返し実行したい処理をここに書く
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>　</p>

<p>このままだとわかりにくいので、具体例を挙げます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//+------------------------------------------------------------------+
</span><span class='line'>//|                                                   loop_test1.mq4 |
</span><span class='line'>//|                                                       MT4-school |
</span><span class='line'>//+------------------------------------------------------------------+
</span><span class='line'>#property copyright "MT4-school"
</span><span class='line'>#property link      ""
</span><span class='line'>
</span><span class='line'>int start() {
</span><span class='line'>    for (int i=0; i&lt;10; i++) {
</span><span class='line'>        Print(i + "回ループしました！");
</span><span class='line'>    }
</span><span class='line'>    return(0);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>　<br/>
ここでのfor文はどういう意味かと申しますと、次のような意味になります。</p>

<table>
<thead>
<tr>
<th>No    </th>
<th> 内容       　</th>
<th> 意味</th>
</tr>
</thead>
<tbody>
<tr>
<td>1項目  </td>
<td> int i = 0 　</td>
<td>　iという変数をカウンターとして、ループする。iの初期値は0とする。</td>
</tr>
<tr>
<td>2項目  </td>
<td> i &lt; 10    　</td>
<td>　iが10未満の間、繰り返し処理する。</td>
</tr>
<tr>
<td>3項目  </td>
<td> i++       　</td>
<td>　1回ループする毎に、iの値を一つ増やす。</td>
</tr>
</tbody>
</table>


<p>　</p>

<p>これを実行すると、Expertログにはこんなふうに表示されます。</p>

<table>
<thead>
<tr>
<th>   </th>
<th> Expertログ    </th>
</tr>
</thead>
<tbody>
<tr>
<td>　 </td>
<td> 0回繰り返しました！</td>
</tr>
<tr>
<td>　 </td>
<td> 1回繰り返しました！</td>
</tr>
<tr>
<td>　 </td>
<td> 2回繰り返しました！</td>
</tr>
<tr>
<td>　 </td>
<td> 3回繰り返しました！</td>
</tr>
<tr>
<td> 　</td>
<td> 4回繰り返しました！</td>
</tr>
<tr>
<td>　 </td>
<td> 5回繰り返しました！</td>
</tr>
<tr>
<td>　 </td>
<td> 6回繰り返しました！</td>
</tr>
<tr>
<td>　 </td>
<td> 7回繰り返しました！</td>
</tr>
<tr>
<td>　 </td>
<td> 8回繰り返しました！</td>
</tr>
<tr>
<td>　 </td>
<td> 9回繰り返しました！</td>
</tr>
</tbody>
</table>


<p>  　</p>

<p>さらに具体例を挙げます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//+------------------------------------------------------------------+
</span><span class='line'>//|                                                   loop_test2.mq4 |
</span><span class='line'>//|                                                       MT4-school |
</span><span class='line'>//+------------------------------------------------------------------+
</span><span class='line'>#property copyright "MT4-school"
</span><span class='line'>#property link      ""
</span><span class='line'>
</span><span class='line'>int start() {
</span><span class='line'>    for (int i=9; i&gt;=0; i--) {
</span><span class='line'>        Print("ループしました！ i=" + i);
</span><span class='line'>    }
</span><span class='line'>    return(0);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>　<br/>
ここでのfor文はどういう意味かと申しますと、次のような意味になります。</p>

<table>
<thead>
<tr>
<th>No    </th>
<th> 内容       　</th>
<th> 意味</th>
</tr>
</thead>
<tbody>
<tr>
<td>1項目  </td>
<td> int i = 9 　</td>
<td>　iという変数をカウンターとして、ループする。iの初期値は9とする。</td>
</tr>
<tr>
<td>2項目  </td>
<td> i >= 0    　</td>
<td>　iが0以上の間、繰り返し処理する。</td>
</tr>
<tr>
<td>3項目  </td>
<td> i&mdash;       　</td>
<td>　1回ループする毎に、iの値を一つ減らす。</td>
</tr>
</tbody>
</table>


<p>　</p>

<p>これを実行すると、Expertログにはこんなふうに表示されます。</p>

<table>
<thead>
<tr>
<th>   </th>
<th> Expertログ    </th>
</tr>
</thead>
<tbody>
<tr>
<td>　 </td>
<td> ループしました！ i=9 　</td>
</tr>
<tr>
<td>　 </td>
<td> ループしました！ i=8 　</td>
</tr>
<tr>
<td>　 </td>
<td> ループしました！ i=7 　</td>
</tr>
<tr>
<td>　 </td>
<td> ループしました！ i=6 　</td>
</tr>
<tr>
<td>　 </td>
<td> ループしました！ i=5 　</td>
</tr>
<tr>
<td>　 </td>
<td> ループしました！ i=4 　</td>
</tr>
<tr>
<td>　 </td>
<td> ループしました！ i=3 　</td>
</tr>
<tr>
<td>　 </td>
<td> ループしました！ i=2 　</td>
</tr>
<tr>
<td>　 </td>
<td> ループしました！ i=1 　</td>
</tr>
<tr>
<td>　 </td>
<td> ループしました！ i=0 　</td>
</tr>
</tbody>
</table>


<p>  　</p>

<p>ある決まった通貨ペアのBid値を取得したければ(というかExpertログに表示したければ)次のような感じでしょうか。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//+------------------------------------------------------------------+
</span><span class='line'>//|                                                   for_sample.mq4 |
</span><span class='line'>//|                                                       MT4-school |
</span><span class='line'>//|                                                                  |
</span><span class='line'>//+------------------------------------------------------------------+
</span><span class='line'>#property copyright "MT4-school"
</span><span class='line'>#property link      ""
</span><span class='line'>
</span><span class='line'>// PAIRS[0]="USDJPY", PAIRS[1]="EURUSD", PAIRS[2]="EURJPY"
</span><span class='line'>string PAIRS[]={"USDJPY","EURUSD","EURJPY"};
</span><span class='line'>int start() {
</span><span class='line'>    for (int i=0; i&lt;3; i++) {
</span><span class='line'>        double bidPrice = MarketInfo(PAIRS[0], MODE_BID);
</span><span class='line'>        Print(PAIRS[i] + " , Bid=" + bidPrice);
</span><span class='line'>    }
</span><span class='line'>    return(0);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>簡単な解説</p>

<ul>
<li>initメソッドとdeinitメソッドは、使用しない場合は無くても大丈夫です。</li>
<li>startメソッドの中では、PAIRS配列の大きさ(要素[0]〜[2]、計3要素）の数だけ、for文でループさせます。</li>
<li><p>MarketInfoでそれぞれの通貨ペアのBid値を取得し、Printメソッドで通貨ペアの名前とそのBid値をExpertログに出力します。
&mdash; ※string PAIRSをstartメソッドの外に定義しているのは、startメソッドが何回呼ばれようと、使う通貨ペアはかならずUSDJPY, EURUSD, EURJPYだからです。<br/>
&mdash; ※startメソッドはチャート上のティックが更新されるたびに何度も何度も呼び出されます。startの外は、EAが起動されたタイミングで一度だけ呼び出されます。</p>

<p>　</p></li>
</ul>


<p>現在保有するすべてのポジションをクローズするなら、こんな感じでしょうか。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//+------------------------------------------------------------------+
</span><span class='line'>//|                                                auto_closeAll.mq4 |
</span><span class='line'>//|                                                       MT4-school |
</span><span class='line'>//+------------------------------------------------------------------+
</span><span class='line'>#property copyright "MT4-school"
</span><span class='line'>#property link      ""
</span><span class='line'>
</span><span class='line'>// スリッページ(3位に設定しておきましょうかね)
</span><span class='line'>int slippage = 3;
</span><span class='line'>
</span><span class='line'>int start() {
</span><span class='line'>
</span><span class='line'>    // 持ってるポジションの数だけ繰り返す
</span><span class='line'>    for (int i=OrdersTotal()-1; i&gt;=0; i--) {
</span><span class='line'>
</span><span class='line'>        // 全ポジションの中から、一つのポジションに着目する
</span><span class='line'>        OrderSelect(i, SELECT_BY_POS);
</span><span class='line'>                
</span><span class='line'>        // 買いエントリーで建てたポジションならBidで売る        
</span><span class='line'>        if  OrderType() == OP_BUY) {
</span><span class='line'>            OrderClose(OrderTicket(), OrderLots(), Bid, slippage, Red);
</span><span class='line'>
</span><span class='line'>        // 売りエントリーで建てたポジションならAskで買う
</span><span class='line'>        } else if (OrderType() == OP_SELL) {
</span><span class='line'>            OrderClose(OrderTicket(), OrderLots(), Ask, slippage, Green);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    return(0);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>  　</p>

<p>こちらの例では、例えば３個のポジションを持っていたら、i=2、1,0と順繰りに減っていくように処理しています。
理由は、<code>OrderSelect(i, SELECT_BY_POS)</code>する時のことを考慮したためです。</p>

<p><code>for (i=0; i&lt;OrdersTotal(); i++) {</code>を使った場合、繰り返し処理は次のように進みます。</p>

<table>
<thead>
<tr>
<th>i </th>
<th> 残りポジション数 </th>
<th> OrderSelect(i, SELECT_BY_POS)の意味合い</th>
</tr>
</thead>
<tbody>
<tr>
<td>0 </td>
<td> 3             </td>
<td> OrderSlect(0, ..＝1番目のポジションに注目せよ　</td>
</tr>
<tr>
<td>1 </td>
<td> 2             </td>
<td> OrderSlect(1, ..＝2番目のポジションに注目せよ　</td>
</tr>
<tr>
<td>2 </td>
<td> 1             </td>
<td> OrderSlect(2, ..＝3番目のポジションに注目せよ　</td>
</tr>
</tbody>
</table>


<p>　
上述のように、ポジションを扱う場合、for文のカウンタiを0,1,2と増加させると、</p>

<ul>
<li><p>1週目のループではi=0。この時「OrderSelect(0, ..」となる。</p>

<ul>
<li>⇒ 残ポジションも3つあるので、1番めのポジションに注目できる。OK</li>
</ul>
</li>
<li><p>2週目のループではi=1。この時「OrderSelect(1, ..」となる。</p>

<ul>
<li>⇒ 残ポジションも2つあるので、2番めのポジションに注目できる。OK</li>
</ul>
</li>
<li><p>3週目のループではi=2。この時「OrderSelect(2, ..」となる。</p>

<ul>
<li>⇒ 残ポジションは1つなので、3番めのポジションに注目できない。NG!!</li>
</ul>
</li>
</ul>


<p>i=2になった時の残ポジション数がもう1しか無いにも関わらず、「3番めのポジションに注目せよ」となり、不整合が起こるのです。
これを防ぐため、i++ではなく　i&mdash;を使用しているのです。</p>

<p>　<br/>
<code>for (int i=OrdersTotal()-1; i&gt;=0; i--) {</code>と、ループの順番を工夫した結果、こんなふうになります。</p>

<table>
<thead>
<tr>
<th>i </th>
<th> 残りポジション数 </th>
<th> OrderSelect(i, SELECT_BY_POS)の意味合い</th>
</tr>
</thead>
<tbody>
<tr>
<td>2 </td>
<td> 3             </td>
<td> OrderSlect(2, ..＝3番目のポジションに注目せよ　</td>
</tr>
<tr>
<td>1 </td>
<td> 2             </td>
<td> OrderSlect(1, ..＝2番目のポジションに注目せよ　</td>
</tr>
<tr>
<td>0 </td>
<td> 1             </td>
<td> OrderSlect(0, ..＝1番目のポジションに注目せよ　</td>
</tr>
</tbody>
</table>


<p>つまり、</p>

<ul>
<li><p>1週目のループではi=2。この時「OrderSelect(2, ..」となる。</p>

<ul>
<li>⇒ 残ポジションも3つあるので、3番めのポジションに注目できる。OK</li>
</ul>
</li>
<li><p>2週目のループではi=1。この時「OrderSelect(1, ..」となる。</p>

<ul>
<li>⇒ 残ポジションも2つあるので、2番めのポジションに注目できる。OK</li>
</ul>
</li>
<li><p>3週目のループではi=0。この時「OrderSelect(0, ..」となる。</p>

<ul>
<li>⇒ 残ポジションも1つあるので、1番めのポジションに注目できる。OK</li>
</ul>
</li>
</ul>


<p>少し難しかったかもしれませんが、こういった考察を都度自分で考える必要はありません。
覚えた事をどこかに書き留めておいて、必要な時にコピペしましょう。
楽に事を済ませられるのが一番です！</p>

<blockquote><p><strong>所長日記</strong></p>

<p>所長は炭酸が好き。妻に炭酸水メーカーを買ってもらいました。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MT4におけるif分岐処理]]></title>
    <link href="http://mt4-school.github.io/blog/2013/07/27/various-process/"/>
    <updated>2013-07-27T23:13:00+09:00</updated>
    <id>http://mt4-school.github.io/blog/2013/07/27/various-process</id>
    <content type="html"><![CDATA[<h1>分岐処理(if, else)</h1>

<p>EAをうまくプログラムするには、条件分岐というものが必ず必要となるでしょう。
例えば、以下のような条件分岐が考えられます。</p>

<ul>
<li>例：USDJPYにおいて、Askが100円を超えたら、買いポジションを持つ。</li>
<li>例：持ったポジションの総ロットサイズが10万通貨を超えたら、新規ポジションは持たない。</li>
<li>例：５分間の高値と安値の差が30pips以上開いていたら、両建てでポジションを持つ。</li>
</ul>


<p>  <strong>⇒if文というものを使うと条件分岐を実現することができます。</strong></p>

<p>　</p>

<h3>if文の書き方の例を何種類か</h3>

<p>例えば、現在のチャートの通貨ペアがUSDJPYであった場合のif文の書き方の例を次に示します。
なお、例中で出現する「Symbol()」は、チャートの通貨ペアを返す（教えてくれる）Metatrader4の標準関数です。
（標準関数＝Metatrader4自体が提供してくれる、便利な関数のこと。標準関数以外の機能が必要になったら、自分で作らなければなりません。）</p>

<ul>
<li>簡単な条件分岐（XXの場合）<br/>
ifを使うと、「XXな場合」を表現できます。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if ( Symbol() == "USDJPY" ) {
</span><span class='line'>  // このチャートの通貨ペアがUSDJPYだった場合、コメント表示する
</span><span class='line'>  Comment("このチャートの通貨ペアはUSDJPYです。");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>　</p>

<ul>
<li>簡単な条件分岐（XXではないの場合）<br/>
if文の評価式(カッコ内に書く式)で、!=を使うと、「XXではない場合」を表現できます。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if ( Symbol() != "USDJPY" ) {
</span><span class='line'>  // このチャートの通貨ペアがUSDJPYではない場合、コメント表示する
</span><span class='line'>  Comment("このチャートの通貨ペアはUSDJPYではありません。");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>　</p>

<ul>
<li>簡単な条件分岐（XX以外の場合）<br/>
elseを使うと、「XX以外の場合」を表現できます。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if ( Symbol() == "USDJPY" ) {
</span><span class='line'>  // このチャートの通貨ペアがUSDJPYだった場合、コメント表示する
</span><span class='line'>  Comment("このチャートの通貨ペアはUSDJPYです。");
</span><span class='line'>
</span><span class='line'>} else {
</span><span class='line'>  // そうではない場合
</span><span class='line'>  Comment("このチャートの通貨ペアはUSDJPYではありません。");
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>　</p>

<ul>
<li>複数の条件分岐 その1<br/>
else ifを使うと、「XXではないけど、YYだった場合」を表現できます。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if ( Symbol() == "USDJPY" ) {
</span><span class='line'>  // このチャートの通貨ペアがUSDJPYだった場合、コメント表示する
</span><span class='line'>  Comment("このチャートの通貨ペアはUSDJPYです。");
</span><span class='line'>
</span><span class='line'>} else if ( Symbol() == "EURJPY"){
</span><span class='line'>  // このチャートの通貨ペアがEURJPYだった場合、コメント表示する
</span><span class='line'>  Comment("このチャートの通貨ペアはEURJPYです。");
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>　</p>

<ul>
<li>複数の条件分岐 その2<br/>
else ifの後にも、elseを追加することができます。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if ( Symbol() == "USDJPY" ) {
</span><span class='line'>  // このチャートの通貨ペアがUSDJPYだった場合、コメント表示する
</span><span class='line'>  Comment("このチャートの通貨ペアはUSDJPYです。");
</span><span class='line'>
</span><span class='line'>} else if ( Symbol() == "EURJPY"){
</span><span class='line'>  // このチャートの通貨ペアがEURJPYだった場合、コメント表示する
</span><span class='line'>  Comment("このチャートの通貨ペアはEURJPYです。");
</span><span class='line'>
</span><span class='line'>} else {
</span><span class='line'>  // そうではない場合
</span><span class='line'>  Comment("このチャートの通貨ペアはUSDJPYでもEURJPYでもありません。");
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>　</p>

<ul>
<li>and(かつ)とor(または）を使った条件分岐 その1 <br/>
&amp;&amp;を使うと、「XXかつYYだった場合」を表現できます。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if ( Symbol() == "USDJPY" && Bid &lt; 76.00) {
</span><span class='line'>  //  チャートの通貨ペアがUSDJPY かつ Bidが76円未満だった場合、コメント表示する
</span><span class='line'>  Comment("すごく円高です！");
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>　</p>

<ul>
<li>and(かつ)とor(または）を使った条件分岐 その2<br/>
||を使うと、「XXか、またはYYだった場合」を表現できます。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if ( Symbol() == "USDJPY" || Symbol() == "EURJPY") {
</span><span class='line'>  //  チャートの通貨ペアがUSDJPYか、またはEURJPYだった場合、コメント表示する
</span><span class='line'>  Comment("現在の通貨ペアは、USDJPYか、またはEURJPYです。");
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>　</p>

<ul>
<li>条件分岐の中の条件分岐<br/>
if文のブロックの中でも、if文を使うことができます。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  チャートの通貨ペアがUSDJPYだった場合
</span><span class='line'>if ( Symbol() == "USDJPY") {  
</span><span class='line'>  if ( Bid &lt; 76.00) {
</span><span class='line'>    //  Bidが76円未満だった場合、コメント表示する
</span><span class='line'>    Comment("すごく円高です！");
</span><span class='line'>  
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>　</p>

<blockquote><p><strong>所長の一言</strong></p>

<p>たくさんのif文を書き連ねてコードを書くと、プロっぽくてかっこ良く思える人もいるかもしれませんが、
業界の人はなるべくif文をたくさん使わない(if文の中にif文を書かない)よう、工夫してコードを書く人が多いです。</p>

<p>コードの品質を高めるための検査指標として、プログラムの「複雑度」というものがあります。
if文を増やすと、「複雑度」が高まり、知らず知らずのうちにプログラムミスが増えるのがその理由です。</p>

<p>複雑な売買ロジックであったとしても、なるべく複雑度が低く、可読性が高い（コードをひと目見て、簡単に理解できる）状態になることが望ましいです。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MT4インストールからEAを作成するまでの流れ]]></title>
    <link href="http://mt4-school.github.io/blog/2013/07/26/"/>
    <updated>2013-07-26T19:53:00+09:00</updated>
    <id>http://mt4-school.github.io/blog/2013/07/</id>
    <content type="html"><![CDATA[<p>えー、それではMetatrader4をインストールしてから、EAを作成するまでの流れをご説明したいと思います。</p>

<h1>MT4インストール</h1>

<ol>
<li>MT4のインストーラーをダウンロードする。</li>
<li>ダウンロードしたMT4のインストーラーを実行し、お使いのPCにMT4をインストールする。</li>
<li>インストールしたMT4を起動する。</li>
</ol>


<h1>MT4初期設定</h1>

<ol>
<li>MT4プラットフォームを提供するFXブローカーの口座（アカウント）を持っていなければ、デモアカウントを作成する。<br/>
<img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%208.33.39%20PM.png" alt="デモアカウント作成画面" /></li>
<li>MT4が起動したら    、Tools> Options> ExpertAdvisorsタブを画像のように設定する。後でやっても良いが、この際忘れないように先にやっておく。

<ul>
<li>Enable Expert Advisors(expect for Custom Indicators and Scrips) に✔</li>
<li>Allow live trading に✔</li>
<li>Allow Dll imports に✔</li>
<li>Allow external experts imports に✔

<ul>
<li>上記4つ以外はすべて✔ をはずす。できたらOKボタンを押す。</li>
</ul>
</li>
</ul>
</li>
</ol>


<p><img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%208.09.26%20PM.png" alt="tool&gt;options&gt;ExpertAdvisors画面" /></p>

<h1>MetaEditorの設定</h1>

<ol>
<li><p>MetaEditorの起動アイコン <img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%209.25.06%20PM.png" alt="MetaEditor起動アイコン" />をクリックしてください。
MetaEditorは、EAやインジケータ等の元となるソースコード（プログラムコード）を書いたり、直したりするためのアプリケーションです。<br/>
<img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%208.12.03%20PM.png" alt="MT4上でMetaEditorアイコンをクリック" /></p></li>
<li><p>MT4をインストールした直後のMetaEditorは、少し使いづらいです。使いづらい理由は以下の通りです。</p>

<ul>
<li>タブが一般的な4桁ではなく、3桁設定となっている。</li>
<li>日本語が入力できない（日本語を入力すると文字が化け、読めない）</li>
</ul>


<p> というわけで少し手を加えて使いやすくします。Tools＞Options&hellip; を選択してください。<br/>
<img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%208.13.16%20PM.png" alt="MetaEditor上でオプションを開く" /></p></li>
<li><p>Generalタブにて。Tab size欄に「4」を設定します。<br/>
<img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%208.14.17%20PM.png" alt="Tools&gt;optionsでタブの桁数を設定" /></p></li>
<li><p>Fontタブにて。FontをMS Gothic(MS ゴシック)、Scriptを「Japanese（日本語）」を設定します。<br/>
<img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%208.15.11%20PM.png" alt="日本語対応のフォントを選択" /></p></li>
</ol>


<p>最後にOKボタンを押して、これで設定は完了です。</p>

<h1>ExpartAdvisorを作る</h1>

<ol>
<li><p>Newアイコン <img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-27%20at%2012.15.05%20AM.png" alt="" /> をクリックしてEA作成を開始する。<br/>
<img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%209.33.19%20PM.png" alt="MetaEditorまっさら画面" /></p></li>
<li><p>ExpertAdvisorを選択し、Nextをクリック<br/>
<img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%209.33.31%20PM.png" alt="ExpertAdvisorWizard" /></p></li>
<li><p>名前(Name欄）等を入力し、Finishをクリック<br/>
<img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%209.33.44%20PM.png" alt="EA情報の入力" /></p></li>
<li><p>EAが編集できる状態になります。<br/>
<img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%209.33.55%20PM.png" alt="編集画面が表示される" /></p></li>
</ol>


<h1>ソースコードの編集＆コンパイル</h1>

<ol>
<li>ソース（プログラムコード）を編集します。<br/>
<img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%209.43.18%20PM.png" alt="" /></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//+------------------------------------------------------------------+
</span><span class='line'>//|                                                       test_1.mq4 |
</span><span class='line'>//|                        Copyright 2013, MetaQuotes Software Corp. |
</span><span class='line'>//|                                        http://www.metaquotes.net |
</span><span class='line'>//+------------------------------------------------------------------+
</span><span class='line'>#property copyright "Copyright 2013, MetaQuotes Software Corp."
</span><span class='line'>#property link      "http://www.metaquotes.net"
</span><span class='line'>
</span><span class='line'>int init() {
</span><span class='line'>    return(0);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int deinit() {
</span><span class='line'>    return(0);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int start() 
</span><span class='line'>    Comment(Bid);
</span><span class='line'>    return(0);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>
　</p>

<p>2. コンパイルボタン <img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%2010.45.55%20PM.png" alt="コンパイルボタン" /> をクリックし、コンパイルします。コンパイルとは、人が読めるソースコードを、PCが理解できるマシン語に変換する処理だと思って下さい。<br/>
<img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%209.44.48%20PM.png" alt="コンパイル" /></p>

<p>コンパイルに成功すると、こんな表示が出ます。<br/>
<img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%209.45.27%20PM.png" alt="" /></p>

<p>コンパイルに失敗すると、こんな表示が出ます。<br/>
<img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%209.46.35%20PM.png" alt="" />
　</p>

<p>3. コンパイルに成功したら、 <img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%2010.51.46%20PM.png" alt="Terminalボタン" />をクリックして、MT4の画面に戻って下さい。<br/>
<strong>(Terminalアイコン)<img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%2010.51.46%20PM.png" alt="Terminalボタン" />をクリックして、MT4の画面に戻って下さい。</strong>  大事なことなので２回書きました。</p>

<p>　</p>

<p>4. するとMT4の画面に戻るのですが、 <em>Terminalアイコンをクリックするという前述の手順</em> でMT4画面に戻ると、NavigatorのExpertAdvisor部に、<code>test_1</code>というEAが出来上がったのがわかると思います。<br/>
この状態で、 <code>test_1</code>をチャートにドラッグ＆ドロップしてください。<br/>
<img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%2010.57.41%20PM.png" alt="test_1.ex4がここに" /></p>

<p>5. <code>test_1</code>のEAを起動するダイアログが表示されます。ここの✔も、下記の画像に合わせて設定してください。そしてOKボタンを押して下さい。<br/>
<img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%2011.38.43%20PM.png" alt="" /></p>

<p>6. すると（MT4がEAの実行を許可されていない場合）、こんな表示になります。
  &ndash; チャートの左上にComment関数の結果が表示されるはずだが、表示されない。</p>

<ul>
<li> チャートの右上には、EA稼働中を示すニコチャンマークが表示されるはずだが、✗マークが表示されている。
<img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-27%20at%2010.35.09%20PM.png" alt="EA起動するも、バツ表示" /></li>
</ul>


<p>この場合は、EAの実行を許可するボタン <img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%2011.39.40%20PM.png" alt="" />　をクリックして下さい。これをクリックすると、ボタンの見た目が <img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-26%20at%2011.55.25%20PM.png" alt="" /> のようになります。</p>

<p>7. 正しくEAが動くと、下記のような画面になります。</p>

<ul>
<li><code>ExpartAdvisorが許可</code>されており、チャート右上にニコチャンマークが表示されている。</li>
<li><code>Comment</code> という関数が、チャート左上にちょっとしたコメント（ここではBid値）を表示。</li>
</ul>


<p><img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-27%20at%2012.03.23%20AM.png" alt="" /></p>

<p>8. ひと通り満足した場合、下記のようにすることで、チャート上から <code>test_1</code> を取り除くことができます。<br/>
<img src="http://mt4-school.github.io/images/2013-07-26/Screen%20Shot%200025-07-27%20at%2012.06.24%20AM.png" alt="" /></p>

<p>以上です。</p>

<p>　</p>

<blockquote><p><strong>所長日記</strong></p>

<p>所長はこの記事を書くのに3時間かかりました。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MT4基礎（データ型）]]></title>
    <link href="http://mt4-school.github.io/blog/2013/07/24/mt4-basics2/"/>
    <updated>2013-07-24T08:19:00+09:00</updated>
    <id>http://mt4-school.github.io/blog/2013/07/24/mt4-basics2</id>
    <content type="html"><![CDATA[<h1>データ型</h1>

<h2>よく使うもの</h2>

<ul>
<li>int：整数。１とか２とか。よく使う。だいたい-21億から+21億までの整数です。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int loop_count = 1;
</span><span class='line'>while(loop_count &lt; 100) {
</span><span class='line'>    Print("現時点で" + loop_count + "回ループしましたー。");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>　</p>

<ul>
<li>bool：ブール型(trueかfalse）。よく使う。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bool buy_sign = false;
</span><span class='line'>if (buy_sign == false) {
</span><span class='line'>  Print("まだ買い時じゃない！");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>　</p>

<ul>
<li>string：文字列型</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>string message = "ここで買ったらやばい！踏みとどまれ";
</span><span class='line'>Print(message);</span></code></pre></td></tr></table></div></figure>


<p>　</p>

<ul>
<li>double：小数点を含む数値はこの型を使います。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>double spread = Ask - Bid;
</span><span class='line'>
</span><span class='line'>// 実際にはpips変換した方が良いでしょうけどね。サンプルなので適当に。
</span><span class='line'>Comment("spreadは" + doubleToString(spread, 5));</span></code></pre></td></tr></table></div></figure>


<p>　</p>

<h2>あまり使わないもの</h2>

<ul>
<li>color：カラー型。EA作るぶんには、それほど使わないかと。インジケータ作るのにはまあまあ使います。</li>
<li>datetime：日時型。エキスパートログ等に細かいログを出力したい時なんかに使います。</li>
<li>char：リテラル型。私はここ３年位、使ったことないです。</li>
</ul>


<p>　</p>

<blockquote><p><strong>所長日記</strong></p>

<p>所長はあまり炭水化物を食べないように心がけており、白いご飯の代わりに野菜の千切りを食べたりします。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MT4基礎（コメント）]]></title>
    <link href="http://mt4-school.github.io/blog/2013/07/24/mt4-basics1/"/>
    <updated>2013-07-24T08:19:00+09:00</updated>
    <id>http://mt4-school.github.io/blog/2013/07/24/mt4-basics1</id>
    <content type="html"><![CDATA[<blockquote><p> 別に、全部覚えなくて問題ありません。私も全部は覚えていません。
 知りたい時に見てわかれば良いのです。</p></blockquote>

<p>　</p>

<h2>コメントの記述</h2>

<p>2種類の書き方があります。</p>

<pre><code>- 単一行にだけ有効なコメント
- 複数行にまたがっても大丈夫なコメント
</code></pre>

<h5>→すでに知ってる人は読み飛ばしてください!</h5>

<p>　
　</p>

<h2>単一行にだけ有効なコメント</h2>

<p>１行だけコメントしたい場合は <code>スラッシュを2発打つ。</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ←コメント</span></code></pre></td></tr></table></div></figure>


<p>コード（プログラム）の説明を書きたい場合はこんな書き方もOK。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  // Bidを少数第5位の精度フォーマットに変換し、文字列型で取得。
</span><span class='line'>  string price = DoubleToStr(Bid, 5);
</span><span class='line'>
</span><span class='line'>  print( "現在の価格は" + price); // 現在価格をエキスパートログに書き出す
</span><span class='line'>  </span></code></pre></td></tr></table></div></figure>


<h2>複数行にわたるコメント</h2>

<p>複数行にわたるコメントを書きたい場合は <code>「/*」 と「*/」 でコメントした部位を囲む</code>　</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* ここは複数行に渡るコメント。
</span><span class='line'>　なぜなら、/* と */ で囲まれた部分だから。
</span><span class='line'>　わかりやすいコメントを書きましょう。
</span><span class='line'>*/</span></code></pre></td></tr></table></div></figure>


<p>もちろん、 <code>「/*」 と「*/」 で囲う部分が1行だけであっても問題ない</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* コメント */
</span></code></pre></td></tr></table></div></figure>


<p>わたくし的には、こういうコメントが好き(自分で作った関数に関するコメント例。<code>javaエンジニア的にはこれかな</code>）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * 自分で作成した独自のMT4関数の説明
</span><span class='line'> *
</span><span class='line'> * @param price 価格
</span><span class='line'> * @param orderType 保有ポジションの種類（Buy or Sell)
</span><span class='line'> *
</span><span class='line'> * @return 現在の損益
</span><span class='line'> */
</span><span class='line'>double getWholeProfitLoss(double price, int orderType) {
</span><span class='line'>
</span><span class='line'>　（省略）
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>　</p>

<blockquote><p><strong>所長日記</strong></p>

<p>所長もそろそろ３０代半ばなので、食べるものに気をつけています。</p></blockquote>
]]></content>
  </entry>
  
</feed>
